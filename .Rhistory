runApp('surfdrive/Shiny-project/PlotsOfData')
runApp('surfdrive/Shiny-project/PlotsOfData')
runApp('surfdrive/Shiny-project/PlotsOfData')
runApp('surfdrive/Shiny-project/PlotsOfData')
runApp('surfdrive/Shiny-project/PlotsOfData')
runApp('surfdrive/Shiny-project/PlotsOfData')
runApp('surfdrive/Shiny-project/PlotsOfData')
runApp('surfdrive/Shiny-project/PlotsOfData')
runApp('surfdrive/Shiny-project/PlotsOfData')
runApp('surfdrive/Shiny-project/PlotsOfData')
runApp('surfdrive/Shiny-project/PlotsOfData')
runApp('surfdrive/Shiny-project/PlotsOfData')
runApp('surfdrive/Shiny-project/PlotsOfData')
runApp('surfdrive/Shiny-project/PlotsOfData')
runApp('surfdrive/Shiny-project/PlotsOfData')
runApp('surfdrive/Shiny-project/PlotsOfData')
runApp('surfdrive/Shiny-project/PlotsOfData')
runApp('surfdrive/Shiny-project/PlotsOfData')
runApp('surfdrive/Shiny-project/PlotsOfData')
runApp('surfdrive/Shiny-project/PlotsOfData')
runApp('surfdrive/Shiny-project/PlotsOfData')
runApp('surfdrive/Shiny-project/PlotsOfData')
runApp('surfdrive/Shiny-project/PlotsOfData')
runApp('surfdrive/Shiny-project/PlotsOfData')
runApp('surfdrive/Shiny-project/PlotsOfData')
runApp('surfdrive/Shiny-project/PlotsOfData')
runApp('surfdrive/Shiny-project/PlotsOfData')
runApp('surfdrive/Shiny-project/PlotsOfData')
runApp('surfdrive/Shiny-project/PlotsOfData')
runApp('surfdrive/Shiny-project/PlotsOfData')
runApp('surfdrive/Shiny-project/PlotsOfData')
runApp('surfdrive/Shiny-project/PlotsOfData')
runApp('surfdrive/Shiny-project/PlotsOfData')
runApp('surfdrive/Shiny-project/PlotsOfData')
runApp('surfdrive/Shiny-project/PlotsOfData')
runApp('surfdrive/Shiny-project/PlotsOfData')
runApp('surfdrive/Shiny-project/PlotsOfData')
runApp('surfdrive/Shiny-project/PlotsOfData')
runApp('surfdrive/Shiny-project/PlotsOfData')
runApp('surfdrive/Shiny-project/PlotsOfData')
runApp('surfdrive/Shiny-project/PlotsOfData')
runApp('surfdrive/Shiny-project/PlotsOfData')
runApp('surfdrive/Shiny-project/PlotsOfData')
runApp('surfdrive/Shiny-project/PlotsOfData')
runApp('surfdrive/Shiny-project/PlotsOfData')
runApp('surfdrive/Shiny-project/PlotsOfData')
runApp('surfdrive/Shiny-project/PlotsOfData')
runApp('surfdrive/Shiny-project/PlotsOfData')
runApp('surfdrive/Shiny-project/PlotsOfData')
runApp('surfdrive/Shiny-project/PlotsOfData')
runApp('surfdrive/Shiny-project/PlotsOfData')
runApp('surfdrive/Shiny-project/PlotsOfData')
runApp('surfdrive/Shiny-project/PlotsOfData')
runApp('surfdrive/Shiny-project/PlotsOfData')
runApp('surfdrive/Shiny-project/PlotsOfData')
runApp('surfdrive/Shiny-project/PlotsOfData')
runApp('surfdrive/Shiny-project/PlotsOfData')
runApp('surfdrive/Shiny-project/PlotsOfData')
runApp('surfdrive/Shiny-project/PlotsOfData')
runApp('surfdrive/Shiny-project/PlotsOfData')
runApp('surfdrive/Shiny-project/PlotsOfData')
runApp('surfdrive/Shiny-project/PlotsOfData')
runApp('surfdrive/Shiny-project/PlotsOfData')
runApp('surfdrive/Shiny-project/PlotsOfData')
runApp('surfdrive/Shiny-project/PlotsOfData')
runApp('surfdrive/Shiny-project/PlotsOfData')
runApp('surfdrive/Shiny-project/PlotsOfData')
runApp('surfdrive/Shiny-project/PlotsOfData')
runApp('surfdrive/Shiny-project/PlotsOfData')
runApp('surfdrive/Shiny-project/PlotsOfData')
runApp('surfdrive/Shiny-project/PlotsOfData')
runApp('surfdrive/Shiny-project/PlotsOfData')
runApp('surfdrive/Shiny-project/LMC')
runApp('surfdrive/Shiny-project/PlotsOfData')
runApp('surfdrive/Shiny-project/PlotsOfData')
runApp('surfdrive/Shiny-project/PlotsOfData')
runApp('surfdrive/Shiny-project/PlotsOfData')
runApp('surfdrive/Shiny-project/PlotsOfData')
runApp('surfdrive/Shiny-project/PlotsOfData')
runApp('surfdrive/Shiny-project/PlotsOfData')
runApp('surfdrive/Shiny-project/PlotsOfData')
runApp('surfdrive/Shiny-project/PlotsOfData')
shiny::runApp('surfdrive/Shiny-project/PlotsOfData')
runApp('surfdrive/Shiny-project/PlotsOfData')
runApp('surfdrive/Shiny-project/PlotsOfData')
runApp('surfdrive/Shiny-project/PlotsOfData')
runApp('surfdrive/Shiny-project/PlotsOfData')
runApp('surfdrive/Shiny-project/PlotsOfData')
runApp('surfdrive/Shiny-project/PlotsOfData')
shiny::runApp('surfdrive/Shiny-project/PlotsOfData')
runApp('surfdrive/Shiny-project/PlotsOfData')
shiny::runApp('surfdrive/Shiny-project/PlotTwist')
runApp('surfdrive/Shiny-project/PlotTwist')
shiny::runApp('surfdrive/Shiny-project/PlotsOfData')
shiny::runApp('surfdrive/Shiny-project/PlotTwist')
runApp('surfdrive/Shiny-project/PlotTwist')
shiny::runApp('surfdrive/Shiny-project/PlotTwist')
library(ggplot2)
## parameters
set.seed(2710)
## Figure 1
d <- rnorm(50)
plot(density(d <âˆ’ rnorm(50))); rug(d)
ggplot(data=data.frame(value=d))+
stat_density(aes(x=value))+
geom_segment(aes(x=value,xend=value),y=0,yend=0.025,col='white')
mu <- 2
si <- 0.6
c <- 500
ylim <- c(-7, 7)
bimodal <- c(rnorm(c/2, -mu, si), rnorm(c/2, mu, si))
uniform <- runif(c, -4, 4)
normal <- rnorm(c, 0, 1.5)
boxplot(bimodal, uniform, normal, ylim = ylim, main = "boxplot",names = 1:3)
d2 <- data.frame(
Distribution=factor(
c(rep('bimodal',c),rep('uniform',c),rep('normal',c)),
levels=c('bimodal','uniform','normal')
),
Value=c(bimodal,uniform,normal)
)
ggplot(data=d2)+
geom_boxplot(aes(x=Distribution,y=Value))
ggplot(data=d2)+
geom_violin(aes(x=Distribution,y=Value),fill='grey',trim=F)+
geom_segment(aes(
x=match(Distribution,levels(Distribution))-0.1,
xend=match(Distribution,levels(Distribution))+0.1,
y=Value,yend=Value),
col='black'
)
data("singer", package = "lattice")
ylim <- c(55, 80)
ggplot(data=singer)+
geom_violin(aes(x=voice.part,y=height),fill='grey',trim=F)+
geom_segment(aes(
x=match(voice.part,levels(voice.part))-0.1,
xend=match(voice.part,levels(voice.part))+0.1,
y=height,yend=height),
col='black'
)
OrchardSprays$log_decrease <- log(OrchardSprays$decrease)
ggplot(data=OrchardSprays)+
geom_violin(aes(x=treatment,y=log_decrease),fill='grey',trim=F)+
geom_segment(aes(
x=match(treatment,levels(treatment))-0.1,
xend=match(treatment,levels(treatment))+0.1,
y=log_decrease,yend=log_decrease),
col='black'
)
View(OrchardSprays)
View(d2)
mu <- 2
si <- 0.6
c <- 500
ylim <- c(-7, 7)
bimodal <- c(rnorm(c/2, -mu, si), rnorm(c/2, mu, si))
uniform <- runif(c, -4, 4)
normal <- rnorm(c, 0, 1.5)
boxplot(bimodal, uniform, normal, ylim = ylim, main = "boxplot",names = 1:3)
ggplot(data=d2)+
geom_boxplot(aes(x=Distribution,y=Value))
ggplot(data=d2)+
geom_violin(aes(x=Distribution,y=Value),fill='grey',trim=F)+
geom_segment(aes(
x=match(Distribution,levels(Distribution))-0.1,
xend=match(Distribution,levels(Distribution))+0.1,
y=Value,yend=Value),
col='black'
)
ggplot(data=d2)+
geom_segment(aes(
x=match(Distribution,levels(Distribution))-0.4,
xend=match(Distribution,levels(Distribution))+0.4,
y=Value,yend=Value),
col='black'
)
ggplot(data=d2)+
geom_segment(aes(
x=match(Distribution,levels(Distribution))-0.4,
xend=match(Distribution,levels(Distribution))+0.4,
y=Value,yend=Value),
col='black', alpha=0.2
)
shiny::runApp('surfdrive/Shiny-project/PlotsOfData')
runApp('surfdrive/Shiny-project/PlotsOfData')
d <- read.csv("https://zenodo.org/record/1003223/files/test-data.csv")
d
shiny::runApp('surfdrive/Shiny-project/PlotsOfData')
shiny::runApp('surfdrive/Shiny-project/PlotTwist')
runApp('surfdrive/Shiny-project/PlotsOfData')
writeClipboard("xx")
data <- rbind(c(1,1,2,3), c(1,1, 3, 4), c(1,4,6,7))
clip <- pipe("pbcopy", "w")
write.table(data, file=clip)
close(clip)
class(data)
runApp('surfdrive/Shiny-project/PlotsOfData')
shiny::runApp('surfdrive/Shiny-project/PlotsOfDifferences')
shiny::runApp('surfdrive/Shiny-project/PlotsOfData')
runApp('surfdrive/Shiny-project/PlotsOfData')
runApp('surfdrive/Shiny-project/PlotsOfData')
runApp('surfdrive/Shiny-project/PlotsOfData')
runApp('surfdrive/Shiny-project/PlotsOfData')
runApp('surfdrive/Shiny-project/PlotsOfData')
runApp('surfdrive/Shiny-project/PlotsOfData')
runApp('surfdrive/Shiny-project/PlotsOfData')
runApp('surfdrive/Shiny-project/PlotsOfData')
runApp('surfdrive/Shiny-project/PlotsOfData')
runApp('surfdrive/Shiny-project/PlotsOfData')
runApp('surfdrive/Shiny-project/PlotsOfData')
shiny::runApp('surfdrive/Shiny-project/PlotsOfData')
shiny::runApp('surfdrive/Shiny-project/Bookmark-URL')
head(faithful)
library(shiny)
# Create an url using twitter's Tweet Web Intent parameters
# https://dev.twitter.com/web/tweet-button/web-intent
url <- "https://twitter.com/intent/tweet?text=Hello%20world&url=https://shiny.rstudio.com/gallery/widget-gallery.html/"
ui <- fluidPage(
# Application title
titlePanel("Twitter share"),
# Sidebar with an actionButton with the onclick parameter
sidebarLayout(
sidebarPanel(
actionButton("twitter_share",
label = "Share",
icon = icon("twitter"),
onclick = sprintf("window.open('%s')", url)) # Combine text with url variable
# Use the onclick parameter to open a new window to the twitter url
),
mainPanel(
)
)
)
server <- function(input, output) {
}
View(server)
View(server)
runApp('surfdrive/Shiny-project/Bookmark-URL')
shinyApp(ui, server)
runApp('surfdrive/Shiny-project/tweet')
runApp('surfdrive/Shiny-project/tweet')
shiny::runApp('surfdrive/Shiny-project/PlotTwist')
shiny::runApp('surfdrive/Shiny-project/PlotsOfData')
shiny::runApp('surfdrive/Shiny-project/PlotsOfData')
shiny::runGitHub('PlotsOfData', 'JoachimGoedhart')
shiny::runApp('surfdrive/Shiny-project/PlotsOfData')
shiny::runApp('surfdrive/Shiny-project/PlotTwist')
runApp('surfdrive/Shiny-project/PlotsOfDifferences')
runApp('surfdrive/Shiny-project/PlotsOfData')
runApp('surfdrive/Shiny-project/PlotsOfDifferences')
runApp('surfdrive/Shiny-project/PlotsOfData')
runApp('surfdrive/Shiny-project/PlotsOfDifferences')
runApp('surfdrive/Shiny-project/PlotsOfData')
runApp('surfdrive/Shiny-project/PlotsOfDifferences')
geyser_data <- data.frame(waiting=faithful$waiting)
p <- ggplot(data = geyser_data, aes(x=waiting))
library(ggplot2)
p <- ggplot(data = geyser_data, aes(x=waiting))
p + geom_density()
p + geom_histogram()
p + geom_density()
p + geom_density()+geom_histogram()
p + geom_histogram() + geom_density()
p + geom_density()
p + geom_histogram()
p + geom_histogram() + geom_density()
geyser_data <- data.frame(waiting=faithful$waiting)
p <- ggplot(data = geyser_data, aes(x=waiting))
library(ggplot2)
geyser_data <- data.frame(waiting=faithful$waiting)
p <- ggplot(data = geyser_data, aes(x=waiting))
p + geom_histogram(y=..density..)
p + geom_histogram(aes(y=..density..))
p + geom_histogram(aes(y=..density..))+geom_density()
p + geom_histogram(aes(y=..density..))+geom_density( aes(y=..ndensity..))
p + geom_histogram(aes(y=..density..))+geom_density( aes(y=..density..))
p + geom_histogram(aes(y=..density..))+geom_density()
p + geom_histogram(aes(y=..density..), bins=10)+geom_density()
p + geom_histogram(aes(y=..density..), bins=50)+geom_density()
p + geom_histogram(aes(y=..density..), bins=50)+geom_density(fill="grey")
p + geom_histogram(aes(y=..density..), bins=50)+geom_density(fill="grey", alpha=0.5)
p + geom_histogram(aes(y=..density..), bins=10)+geom_density(fill="grey", alpha=0.5)
p + geom_histogram(aes(y=..density..), bins=10, alpha=0.5)+geom_density(fill="grey", alpha=0.5)
p + geom_histogram(aes(y=..density..), bins=10, alpha=0.2)+geom_density(fill="grey", alpha=0.8)
p + geom_histogram(aes(y=..density..), bins=10, alpha=0.8)+geom_density(fill="grey", alpha=0.2)
p + geom_histogram(aes(y=..density..), bins=10, alpha=0.5)+geom_density(fill="grey", alpha=0.5)
p + geom_histogram(aes(y=..density..), bins=20, alpha=0.5)+geom_density(fill="grey", alpha=0.5)
shiny::runApp('surfdrive/Shiny-project/Shiny-demo')
shiny::runApp('surfdrive/Shiny-project/Shiny-demo')
library(ggplot2)
shiny::runGitHub('Shiny_step-by-step', 'JoachimGoedhart', ref="Update_3")
shiny::runApp('surfdrive/Shiny-project/Shiny-Demo')
?geom_vline
runApp('surfdrive/Shiny-project/Shiny-Demo')
?geom_histogram
?geom_density
runApp('surfdrive/Shiny-project/Shiny-Demo')
shiny::runApp('surfdrive/Shiny-project/PlotTwist')
shiny::runGitHub('PlotsOfData', 'JoachimGoedhart')
shiny::runApp('surfdrive/Shiny-project/PlotsOfData')
8*2303*3.141593*3e8/6e23
8*2303*3.141593*3e8/6.022e23
8*2303*Pi*c/Na = 8*2303*3.141593*3e8/6.022e23*100
8*2303*3.141593*3e8/6.022e23*100
#Set some protein specific parameters
QY = 0.93
tau = 4.00
#Set some physical parameters
n_cells = 1.365
n_H2O = 1.33
PI = 3.141593
C = 3e10 #speed of light in cm/s
N = 6.022e23
8*2303*Pi*C/N
8*2303*PI*C/N
const = 8*2303*PI*C/N
#Calculate constant
constant = 8*2303*PI*C/N
QY = 0.93
tau = 4.00
#Set some physical parameters
n_cells = 1.365
n_H2O = 1.33
Pi = 3.141593
c = 3e10 #speed of light in cm/s
Navogadro = 6.022e23
#Calculate constant
constant = 8*2303*Pi*c/Navogadro
shiny::runApp('surfdrive/Shiny-project/Strickler_Berg')
runApp('surfdrive/Shiny-project/Strickler_Berg')
runApp('surfdrive/Shiny-project/Strickler_Berg')
runApp('surfdrive/Shiny-project/Strickler_Berg')
runApp('surfdrive/Shiny-project/Strickler_Berg')
runApp('surfdrive/Shiny-project/Strickler_Berg')
runApp()
runApp('surfdrive/Shiny-project/Strickler_Berg')
runApp('surfdrive/Shiny-project/Strickler_Berg')
runApp('surfdrive/Shiny-project/Strickler_Berg')
runApp('surfdrive/Shiny-project/Strickler_Berg')
runApp('surfdrive/Shiny-project/Strickler_Berg')
runApp('surfdrive/Shiny-project/Strickler_Berg')
runApp('surfdrive/Shiny-project/Strickler_Berg')
runApp('surfdrive/Shiny-project/Strickler_Berg')
runApp('surfdrive/Shiny-project/Strickler_Berg')
runApp('surfdrive/Shiny-project/Strickler_Berg')
runApp('surfdrive/Shiny-project/Strickler_Berg')
runApp('surfdrive/Shiny-project/Strickler_Berg')
runApp('surfdrive/Shiny-project/Strickler_Berg')
runApp('surfdrive/Shiny-project/Strickler_Berg')
shiny::runApp('surfdrive/Shiny-project/PlotTwist')
runApp('surfdrive/Shiny-project/PlotTwist')
runApp('surfdrive/Shiny-project/PlotTwist')
runApp('surfdrive/Shiny-project/PlotTwist')
runApp('surfdrive/Shiny-project/PlotTwist')
runApp('surfdrive/Shiny-project/PlotTwist')
runApp('surfdrive/Shiny-project/PlotTwist')
runApp('surfdrive/Shiny-project/PlotTwist')
runApp('surfdrive/Shiny-project/PlotTwist')
runApp('surfdrive/Shiny-project/PlotTwist')
runApp('surfdrive/Shiny-project/PlotTwist')
runApp('surfdrive/Shiny-project/PlotTwist')
runApp('surfdrive/Shiny-project/PlotTwist')
runApp('surfdrive/Shiny-project/PlotTwist')
runApp('surfdrive/Shiny-project/PlotTwist')
runApp('surfdrive/Shiny-project/PlotTwist')
runApp('surfdrive/Shiny-project/PlotTwist')
runApp('surfdrive/Shiny-project/PlotTwist')
runApp('surfdrive/Shiny-project/PlotTwist')
runApp('surfdrive/Shiny-project/PlotTwist')
runApp('surfdrive/Shiny-project/PlotTwist')
runApp('surfdrive/Shiny-project/PlotTwist')
runApp('surfdrive/Shiny-project/PlotTwist')
shiny::runApp('surfdrive/Shiny-project/PlotTwist')
runApp('surfdrive/Shiny-project/PlotTwist')
runApp('surfdrive/Shiny-project/PlotTwist')
runApp('surfdrive/Shiny-project/PlotTwist')
shiny::runApp('surfdrive/Shiny-project/PlotTwist')
shiny::runApp('surfdrive/Shiny-project/PlotTwist')
runApp('surfdrive/Shiny-project/PlotTwist')
shiny::runApp('surfdrive/Shiny-project/PlotTwist')
?class
x <- 10
class(x)
x <- c("R","X"," ")
class(x)
x$R
x[x != "X"]
runApp('surfdrive/Shiny-project/PlotTwist')
runApp('surfdrive/Shiny-project/PlotTwist')
runApp('surfdrive/Shiny-project/PlotTwist')
runApp('surfdrive/Shiny-project/PlotTwist')
runApp('surfdrive/Shiny-project/PlotTwist')
shiny::runApp('surfdrive/Shiny-project/PlotTwist')
runApp('surfdrive/Shiny-project/PlotTwist')
runApp('surfdrive/Shiny-project/PlotTwist')
runApp('surfdrive/Shiny-project/PlotTwist')
shiny::runApp('surfdrive/Shiny-project/PlotsOfData')
shiny::runApp('surfdrive/Shiny-project/PlotsOfData')
shiny::runApp('surfdrive/Shiny-project/PlotsOfData')
runApp('surfdrive/Shiny-project/PlotsOfData')
runApp('surfdrive/Shiny-project/PlotsOfData')
runApp('surfdrive/Shiny-project/PlotsOfData')
runApp('surfdrive/Shiny-project/PlotsOfData')
runApp('surfdrive/Shiny-project/PlotsOfData')
runApp('surfdrive/Shiny-project/PlotsOfData')
runApp('surfdrive/Shiny-project/PlotsOfData')
runApp('surfdrive/Shiny-project/PlotsOfData')
shiny::runApp('surfdrive/Shiny-project/PlotTwist')
runApp('surfdrive/Shiny-project/PlotTwist')
runApp('surfdrive/Shiny-project/PlotTwist')
runApp('surfdrive/Shiny-project/PlotTwist')
runApp('surfdrive/Shiny-project/PlotTwist')
runApp('surfdrive/Shiny-project/PlotTwist')
runApp('surfdrive/Shiny-project/PlotTwist')
shiny::runApp('surfdrive/Shiny-project/PlotsOfData')
runApp('surfdrive/Shiny-project/PlotTwist')
?dist
?t
x <- matrix(rnorm(100), nrow = 5)
ordered_list <- reactive({
klaas <-  df_binned()
if(input$ordered == "max_int") {
reordered_list <- reorder(klaas$unique_id, klaas$Value, max, na.rm = TRUE)
} else if (input$ordered == "none") {
reordered_list <- factor(klaas$unique_id, levels=unique(klaas$unique_id))
} else if (input$ordered == "int_int") {
reordered_list <- reorder(klaas$unique_id, klaas$Value, sum, na.rm = TRUE)
}  else if (input$ordered == "amplitude") {
#Determine a ranking based on amplitude = max-min
df_rank <- klaas %>% group_by(unique_id) %>% summarise(amplitude=max(Value)-min(Value)) %>% mutate(rank=percent_rank(amplitude))
reordered_list <- reorder(df_rank$unique_id, df_rank$rank)
} else if (input$ordered == "hc") {
#Convert to wide format
df_wide <- klaas %>% select(unique_id, Value,Time)  %>% spread(key=unique_id, value=Value)
#Remove Time info
df_wide <- df_wide %>% select(-Time)
#hierarchical clustering
hc <- hclust(dist(t(df_wide)))
#Column order from clustering
col.order <- hc$order
#Reorder the dataframe dat according to the column order determined by clustering
df_clustered <- df_wide[, col.order]
#Get the ordered column names from the clustered dataframe
reordered_list <- colnames(df_clustered)
observe({ print(reordered_list) })
}
ordered_list <- levels(reordered_list)
observe({ print(ordered_list) })
return(ordered_list)
})
x
dist(x, diag = TRUE)
dist(x, upper = TRUE)
x
hclust(dist(x), method = "ward.D2")
dist(x, method = "manhattan")
dist(x, method = "euclidean")
dist(x, method = "canberra")
hclust(dist(x), method = "ward.D2")
plot(hclust(dist(x), method = "ward.D2"))
plot(hclust(dist(x)))
plot(hclust(dist(x, method = "manhattan")))
plot(hclust(dist(x, method = "canberra")))
hclust(dist(x, method = "canberra"))$order
?cutree
hc <- hclust(dist(x, method = "canberra"))
cutree(hc, k = 1:3)
?dtw
runApp('surfdrive/Shiny-project/PlotsOfData')
runApp('surfdrive/Shiny-project/PlotsOfData')
runApp('surfdrive/Shiny-project/PlotsOfData')
runApp('surfdrive/Shiny-project/PlotsOfData')
?s.cl.diss
s.cl.diss
?dist
shiny::runApp('surfdrive/Shiny-project/PlotsOfData')
shiny::runApp('surfdrive/Shiny-project/PlotTwist')
shiny::runApp('surfdrive/Shiny-project/PlotsOfDifferences')
runApp('surfdrive/Shiny-project/PlotTwist')
n <- 2/1
floor(n)
floor (1/2)
ceiling (1/2)
ceiling (1/3)
floor (1.5)
floor (2)
runApp('surfdrive/Shiny-project/PlotTwist')
ceiling(0.1)
ceiling(0.9)
ceiling(0)
ceiling(3)
runApp('surfdrive/Shiny-project/PlotTwist')
install.packages("shinyjs")
runApp('surfdrive/Shiny-project/shiny-freeclust-master')
shiny::runApp('surfdrive/Shiny-project/shiny-timecourse-inspector-master')
library("devtools", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
install_github("dmattek/tca-package")
shiny::runApp('surfdrive/Shiny-project/PlotTwist')
shiny::runApp('surfdrive/Shiny-project/PlotTwist')
shiny::runApp('surfdrive/Shiny-project/PlotTwist')
?dist
?dist()
?sliderinput
??sliderinput
shiny::runApp('surfdrive/Shiny-project/PlotTwist')
runApp('surfdrive/Shiny-project/PlotTwist')
runApp('surfdrive/Shiny-project/PlotTwist')
runApp('surfdrive/Shiny-project/PlotTwist')
runApp('surfdrive/Shiny-project/PlotTwist')
runApp('surfdrive/Shiny-project/PlotTwist')
shiny::runApp('surfdrive/Shiny-project/PlotTwist')
