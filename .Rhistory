n_H2O = 1.33
Pi = 3.141593
c = 3e10 #speed of light in cm/s
Navogadro = 6.022e23
#Calculate constant
constant = 8*2303*Pi*c/Navogadro
shiny::runApp('surfdrive/Shiny-project/Strickler_Berg')
runApp('surfdrive/Shiny-project/Strickler_Berg')
runApp('surfdrive/Shiny-project/Strickler_Berg')
runApp('surfdrive/Shiny-project/Strickler_Berg')
runApp('surfdrive/Shiny-project/Strickler_Berg')
runApp('surfdrive/Shiny-project/Strickler_Berg')
runApp()
runApp('surfdrive/Shiny-project/Strickler_Berg')
runApp('surfdrive/Shiny-project/Strickler_Berg')
runApp('surfdrive/Shiny-project/Strickler_Berg')
runApp('surfdrive/Shiny-project/Strickler_Berg')
runApp('surfdrive/Shiny-project/Strickler_Berg')
runApp('surfdrive/Shiny-project/Strickler_Berg')
runApp('surfdrive/Shiny-project/Strickler_Berg')
runApp('surfdrive/Shiny-project/Strickler_Berg')
runApp('surfdrive/Shiny-project/Strickler_Berg')
runApp('surfdrive/Shiny-project/Strickler_Berg')
runApp('surfdrive/Shiny-project/Strickler_Berg')
runApp('surfdrive/Shiny-project/Strickler_Berg')
runApp('surfdrive/Shiny-project/Strickler_Berg')
runApp('surfdrive/Shiny-project/Strickler_Berg')
shiny::runApp('surfdrive/Shiny-project/PlotTwist')
runApp('surfdrive/Shiny-project/PlotTwist')
runApp('surfdrive/Shiny-project/PlotTwist')
runApp('surfdrive/Shiny-project/PlotTwist')
runApp('surfdrive/Shiny-project/PlotTwist')
runApp('surfdrive/Shiny-project/PlotTwist')
runApp('surfdrive/Shiny-project/PlotTwist')
runApp('surfdrive/Shiny-project/PlotTwist')
runApp('surfdrive/Shiny-project/PlotTwist')
runApp('surfdrive/Shiny-project/PlotTwist')
runApp('surfdrive/Shiny-project/PlotTwist')
runApp('surfdrive/Shiny-project/PlotTwist')
runApp('surfdrive/Shiny-project/PlotTwist')
runApp('surfdrive/Shiny-project/PlotTwist')
runApp('surfdrive/Shiny-project/PlotTwist')
runApp('surfdrive/Shiny-project/PlotTwist')
runApp('surfdrive/Shiny-project/PlotTwist')
runApp('surfdrive/Shiny-project/PlotTwist')
runApp('surfdrive/Shiny-project/PlotTwist')
runApp('surfdrive/Shiny-project/PlotTwist')
runApp('surfdrive/Shiny-project/PlotTwist')
runApp('surfdrive/Shiny-project/PlotTwist')
runApp('surfdrive/Shiny-project/PlotTwist')
shiny::runApp('surfdrive/Shiny-project/PlotTwist')
runApp('surfdrive/Shiny-project/PlotTwist')
runApp('surfdrive/Shiny-project/PlotTwist')
runApp('surfdrive/Shiny-project/PlotTwist')
shiny::runApp('surfdrive/Shiny-project/PlotTwist')
shiny::runApp('surfdrive/Shiny-project/PlotTwist')
runApp('surfdrive/Shiny-project/PlotTwist')
shiny::runApp('surfdrive/Shiny-project/PlotTwist')
?class
x <- 10
class(x)
x <- c("R","X"," ")
class(x)
x$R
x[x != "X"]
runApp('surfdrive/Shiny-project/PlotTwist')
runApp('surfdrive/Shiny-project/PlotTwist')
runApp('surfdrive/Shiny-project/PlotTwist')
runApp('surfdrive/Shiny-project/PlotTwist')
runApp('surfdrive/Shiny-project/PlotTwist')
shiny::runApp('surfdrive/Shiny-project/PlotTwist')
runApp('surfdrive/Shiny-project/PlotTwist')
runApp('surfdrive/Shiny-project/PlotTwist')
runApp('surfdrive/Shiny-project/PlotTwist')
shiny::runApp('surfdrive/Shiny-project/PlotsOfData')
shiny::runApp('surfdrive/Shiny-project/PlotsOfData')
shiny::runApp('surfdrive/Shiny-project/PlotsOfData')
runApp('surfdrive/Shiny-project/PlotsOfData')
runApp('surfdrive/Shiny-project/PlotsOfData')
runApp('surfdrive/Shiny-project/PlotsOfData')
runApp('surfdrive/Shiny-project/PlotsOfData')
runApp('surfdrive/Shiny-project/PlotsOfData')
runApp('surfdrive/Shiny-project/PlotsOfData')
runApp('surfdrive/Shiny-project/PlotsOfData')
runApp('surfdrive/Shiny-project/PlotsOfData')
shiny::runApp('surfdrive/Shiny-project/PlotTwist')
runApp('surfdrive/Shiny-project/PlotTwist')
runApp('surfdrive/Shiny-project/PlotTwist')
runApp('surfdrive/Shiny-project/PlotTwist')
runApp('surfdrive/Shiny-project/PlotTwist')
runApp('surfdrive/Shiny-project/PlotTwist')
runApp('surfdrive/Shiny-project/PlotTwist')
shiny::runApp('surfdrive/Shiny-project/PlotsOfData')
runApp('surfdrive/Shiny-project/PlotTwist')
?dist
?t
x <- matrix(rnorm(100), nrow = 5)
ordered_list <- reactive({
klaas <-  df_binned()
if(input$ordered == "max_int") {
reordered_list <- reorder(klaas$unique_id, klaas$Value, max, na.rm = TRUE)
} else if (input$ordered == "none") {
reordered_list <- factor(klaas$unique_id, levels=unique(klaas$unique_id))
} else if (input$ordered == "int_int") {
reordered_list <- reorder(klaas$unique_id, klaas$Value, sum, na.rm = TRUE)
}  else if (input$ordered == "amplitude") {
#Determine a ranking based on amplitude = max-min
df_rank <- klaas %>% group_by(unique_id) %>% summarise(amplitude=max(Value)-min(Value)) %>% mutate(rank=percent_rank(amplitude))
reordered_list <- reorder(df_rank$unique_id, df_rank$rank)
} else if (input$ordered == "hc") {
#Convert to wide format
df_wide <- klaas %>% select(unique_id, Value,Time)  %>% spread(key=unique_id, value=Value)
#Remove Time info
df_wide <- df_wide %>% select(-Time)
#hierarchical clustering
hc <- hclust(dist(t(df_wide)))
#Column order from clustering
col.order <- hc$order
#Reorder the dataframe dat according to the column order determined by clustering
df_clustered <- df_wide[, col.order]
#Get the ordered column names from the clustered dataframe
reordered_list <- colnames(df_clustered)
observe({ print(reordered_list) })
}
ordered_list <- levels(reordered_list)
observe({ print(ordered_list) })
return(ordered_list)
})
x
dist(x, diag = TRUE)
dist(x, upper = TRUE)
x
hclust(dist(x), method = "ward.D2")
dist(x, method = "manhattan")
dist(x, method = "euclidean")
dist(x, method = "canberra")
hclust(dist(x), method = "ward.D2")
plot(hclust(dist(x), method = "ward.D2"))
plot(hclust(dist(x)))
plot(hclust(dist(x, method = "manhattan")))
plot(hclust(dist(x, method = "canberra")))
hclust(dist(x, method = "canberra"))$order
?cutree
hc <- hclust(dist(x, method = "canberra"))
cutree(hc, k = 1:3)
?dtw
runApp('surfdrive/Shiny-project/PlotsOfData')
runApp('surfdrive/Shiny-project/PlotsOfData')
runApp('surfdrive/Shiny-project/PlotsOfData')
runApp('surfdrive/Shiny-project/PlotsOfData')
?s.cl.diss
s.cl.diss
?dist
shiny::runApp('surfdrive/Shiny-project/PlotsOfData')
shiny::runApp('surfdrive/Shiny-project/PlotTwist')
shiny::runApp('surfdrive/Shiny-project/PlotsOfDifferences')
runApp('surfdrive/Shiny-project/PlotTwist')
n <- 2/1
floor(n)
floor (1/2)
ceiling (1/2)
ceiling (1/3)
floor (1.5)
floor (2)
runApp('surfdrive/Shiny-project/PlotTwist')
ceiling(0.1)
ceiling(0.9)
ceiling(0)
ceiling(3)
runApp('surfdrive/Shiny-project/PlotTwist')
install.packages("shinyjs")
runApp('surfdrive/Shiny-project/shiny-freeclust-master')
shiny::runApp('surfdrive/Shiny-project/shiny-timecourse-inspector-master')
library("devtools", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
install_github("dmattek/tca-package")
shiny::runApp('surfdrive/Shiny-project/PlotTwist')
shiny::runApp('surfdrive/Shiny-project/PlotTwist')
shiny::runApp('surfdrive/Shiny-project/PlotTwist')
?dist
?dist()
?sliderinput
??sliderinput
shiny::runApp('surfdrive/Shiny-project/PlotTwist')
runApp('surfdrive/Shiny-project/PlotTwist')
runApp('surfdrive/Shiny-project/PlotTwist')
runApp('surfdrive/Shiny-project/PlotTwist')
runApp('surfdrive/Shiny-project/PlotTwist')
runApp('surfdrive/Shiny-project/PlotTwist')
shiny::runApp('surfdrive/Shiny-project/PlotTwist')
shiny::runApp('surfdrive/Shiny-project/PlotTwist')
shiny::runApp('surfdrive/Shiny-project/PlotTwist')
runApp('surfdrive/Shiny-project/PlotTwist')
shiny::runApp('surfdrive/Shiny-project/PlotTwist')
runApp('surfdrive/Shiny-project/PlotTwist')
shiny::runApp('surfdrive/Shiny-project/PlotTwist')
runApp('surfdrive/Shiny-project/PlotTwist')
runApp('surfdrive/Shiny-project/PlotTwist')
runApp('surfdrive/Shiny-project/PlotTwist')
shiny::runApp('surfdrive/Shiny-project/PlotTwist')
shiny::runApp('surfdrive/Shiny-project/PlotsOfData')
runApp('surfdrive/Shiny-project/PlotTwist')
runApp('surfdrive/Shiny-project/PlotTwist')
shiny::runApp('surfdrive/Shiny-project/PlotTwist')
runApp('surfdrive/Shiny-project/PlotTwist')
shiny::runApp('surfdrive/Shiny-project/PlotTwist')
citation("dtw")
shiny::runApp('surfdrive/Shiny-project/PlotTwist')
?dist
?diss
?dist()
?dist()
?dist()
?hclust
?dist()
runApp('surfdrive/Shiny-project/PlotTwist')
??dist
?dist()
install.packages("tsmp")
??mpdist
mp_toy_data
library("devtools", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
devtools::install_github("franzbischoff/tsmp")
mp_toy_data
?MPDist
?MPDist()
??mpdist
mp_toy_data
library("tsmp", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
mp_toy_data
data <- mp_fluss_data$walkjogrun$data
devtools::install_github("franzbischoff/tsmp")
shiny::runApp('surfdrive/Shiny-project/PlotTwist')
shiny::runApp('surfdrive/Shiny-project/PlotTwist')
shiny::runApp('surfdrive/Shiny-project/PlotTwist')
runApp('surfdrive/Shiny-project/PlotTwist')
shiny::runApp('surfdrive/Shiny-project/PlotTwist')
runApp('surfdrive/Shiny-project/PlotTwist')
runApp('surfdrive/Shiny-project/PlotTwist')
runApp('surfdrive/Shiny-project/PlotTwist')
runApp('surfdrive/Shiny-project/PlotTwist')
runApp('surfdrive/Shiny-project/PlotTwist')
runApp('surfdrive/Shiny-project/PlotTwist')
runApp('surfdrive/Shiny-project/PlotTwist')
runApp('surfdrive/Shiny-project/PlotTwist')
shiny::runApp('surfdrive/Shiny-project/PlotTwist')
shiny::runApp('surfdrive/Shiny-project/PlotTwist')
runApp('surfdrive/Shiny-project/PlotTwist')
runApp('surfdrive/Shiny-project/PlotTwist')
runApp('surfdrive/Shiny-project/PlotTwist')
runApp('surfdrive/Shiny-project/PlotTwist')
runApp('surfdrive/Shiny-project/PlotTwist')
runApp('surfdrive/Shiny-project/PlotTwist')
?Paul Tol (https://personal.sron.nl/~pault/) and Masataka Okabe & Kei Ito (https://jfly.uni-koeln.de/color/)
?scale_fill_viridis_c
??scale_fill_viridis_c
require(scales)
Tol_bright <- c('#EE6677', '#228833', '#4477AA', '#CCBB44', '#66CCEE', '#AA3377', '#BBBBBB')
Tol_muted <- c('#88CCEE', '#44AA99', '#117733', '#999933', '#DDCC77', '#CC6677', '#882255', '#AA4499', '#332288', '#DDDDDD')
Tol_light <- c('#BBCC33', '#AAAA00', '#77AADD', '#EE8866', '#EEDD88', '#FFAABB', '#99DDFF', '#44BB99', '#DDDDDD')
#From Color Universal Design (CUD): https://jfly.uni-koeln.de/color/
cud <- c("#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7", "#000000")
show_col(cud)
require(scales)
Tol_bright <- c('#EE6677', '#228833', '#4477AA', '#CCBB44', '#66CCEE', '#AA3377', '#BBBBBB')
Tol_muted <- c('#88CCEE', '#44AA99', '#117733', '#999933', '#DDCC77', '#CC6677', '#882255', '#AA4499', '#332288', '#DDDDDD')
Tol_light <- c('#BBCC33', '#AAAA00', '#77AADD', '#EE8866', '#EEDD88', '#FFAABB', '#99DDFF', '#44BB99', '#DDDDDD')
#From Color Universal Design (CUD): https://jfly.uni-koeln.de/color/
cud <- c("#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7", "#000000")
show_col(c(cud, Tol_light))
require(scales)
Tol_bright <- c('#EE6677', '#228833', '#4477AA', '#CCBB44', '#66CCEE', '#AA3377', '#BBBBBB')
Tol_muted <- c('#88CCEE', '#44AA99', '#117733', '#999933', '#DDCC77', '#CC6677', '#882255', '#AA4499', '#332288', '#DDDDDD')
Tol_light <- c('#BBCC33', '#AAAA00', '#77AADD', '#EE8866', '#EEDD88', '#FFAABB', '#99DDFF', '#44BB99', '#DDDDDD')
#From Color Universal Design (CUD): https://jfly.uni-koeln.de/color/
cud <- c("#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7", "#000000")
show_col(c(Tol_light))
show_col(cud)
show_col(Tol_muted)
show_col(Tol_bright)
show_col(Tol_light)
show_col(cud)
show_col(Tol_muted)
show_col(Tol_bright)
show_col(Tol_light)
show_col(Tol_bright)
show_col(Tol_muted)
show_col(cud)
show_col(Tol_muted)
show_col(Tol_bright)
show_col(Tol_light)
show_col(cud)
show_col(Tol_muted)
if (system.file(package = "inlmisc", lib.loc = .libPaths()) == "")
utils::install.packages("inlmisc", dependencies = TRUE)
install.packages("inlmisc")
pal <- function(col, border = "light gray", ...){
n <- length(col)
plot(0, 0, type="n", xlim = c(0, 1), ylim = c(0, 1),
axes = FALSE, xlab = "", ylab = "", ...)
rect(0:(n-1)/n, 0, 1:n/n, 1, col = col, border = border)
}
pal(Tol_bright)
mycols=c(“dodgerblue2”, “#E31A1C”, “green4”, “#6A3D9A”, “#FF7F00”, “black”,
“gold1”, “skyblue2”, “#FB9A99”, “palegreen2”, “#CAB2D6”, “#FDBF6F”,
“gray70”, “khaki2”, “maroon”, “orchid1”, “deeppink1”, “blue1”,
“steelblue4”, “darkturquoise”, “green1”, “yellow4”, “yellow3”,
“darkorange4”, “brown”)
ones <- rep(1, length=length(mycols))
# Get hsv for labels
names(ones) <- apply(round(rgb2hsv(col2rgb(c(mycols))),2), 2,
function(x) {paste(x, collapse=", ")})
pie(ones, col=mycols, cex=.75, main = "HSV values")
mycols=c(“dodgerblue2”, “#E31A1C”, “green4”, “#6A3D9A”, “#FF7F00”, “black”,
“gold1”, “skyblue2”, “#FB9A99”, “palegreen2”, “#CAB2D6”, “#FDBF6F”,
“gray70”, “khaki2”, “maroon”, “orchid1”, “deeppink1”, “blue1”,
“steelblue4”, “darkturquoise”, “green1”, “yellow4”, “yellow3”,
“darkorange4”, “brown”)
mycols=c("dodgerblue2", “#E31A1C”, “green4”, “#6A3D9A”, “#FF7F00”, “black”,
“gold1”, “skyblue2”, “#FB9A99”, “palegreen2”, “#CAB2D6”, “#FDBF6F”)
mycols=c("dodgerblue2", “#E31A1C”, “green4”, “#6A3D9A”, “#FF7F00”, “black”,
"“gold1”, “skyblue2”, “"#FB9A99”, “palegreen2”, “#CAB2D6”, “#FDBF6F”)
ones <- rep(1, length=length(mycols))
mycols=c("dodgerblue2", “#E31A1C”, “green4”, “#6A3D9A”, “#FF7F00”, “black”, "gold1”, “skyblue2”, “"#FB9A99”, “palegreen2”, “#CAB2D6”, “#FDBF6F”)
mycols=c("dodgerblue2", "#E31A1C", "green4", "#6A3D9A", "#FF7F00", "black", "gold1", "skyblue2", "#FB9A99", "palegreen2", "#CAB2D6", "#FDBF6F")
ones <- rep(1, length=length(mycols))
names(ones) <- apply(round(rgb2hsv(col2rgb(c(mycols))),2), 2,
function(x) {paste(x, collapse=", ")})
pie(ones, col=mycols, cex=.75, main = "HSV values")
pie(names(mycols), col=mycols, cex=.75, main = "HSV values")
pie(mycols, col=mycols, cex=.75, main = "HSV values")
pie(mycols, col=mycols)
pie(mycols, col=mycols)
pie(names(mycols), col=mycols)
pie(ones, col=mycols, cex=.75)
names(ones)=mycols
pie(ones, col=mycols, cex=.75)
ones <- rep(1, length=length(cud))
# Get hsv for labels
names(ones)=mycols
pie(ones, col=mycols, cex=.75)
ones <- rep(1, length=length(cud))
# Get hsv for labels
names(ones)=cud
pie(ones, col=mycols, cex=.75)
ones <- rep(1, length=length(cud))
# Get hsv for labels
names(ones)=cud
pie(ones, col=mycols, cex=.75, main="CUD")
pie(ones, col=mycols, cex=3, main="CUD")
pie(ones, col=mycols, cex=1, main="CUD")
pie(ones, col=mycols, cex=1, main="CUD")
par(mfrow=c(1,2))
ones <- rep(1, length=length(cud))
names(ones)=cud
twos <- rep(1, length=length(Tol_bright))
names(twos)=Tol_bright
pie(ones, col=cud, cex=1, main="CUD")
pie(twos, col=Tol_bright, cex=1, main="CUD")
par(mfrow=c(1,2))
ones <- rep(1, length=length(cud))
names(ones)=cud
twos <- rep(1, length=length(Tol_bright))
names(twos)=Tol_bright
pie(ones, col=cud, cex=.5, main="CUD")
pie(twos, col=Tol_bright, cex=.5, main="Tol_bright")
par(mfrow=c(1,2))
ones <- rep(1, length=length(cud))
names(ones)=cud
twos <- rep(1, length=length(Tol_bright))
names(twos)=Tol_bright
pie(ones, col=cud, cex=1, main="CUD")
pie(twos, col=Tol_bright, cex=1, main="Tol_bright")
palpie <- function(col)
{
par(mar=c(1,1,1,1))
ones <- rep(1, length=length(col))
names(ones) <- col
pie(ones, col=col, cex=.75, main = "Palette")
par(mar=c(5.1, 4.1, 4.1, 2.1))
}
palpie(Tol_bright)
palpie(Tol_muted)
palpie(cud)
par(mfrow=c(2,2))
palpie(Tol_light)
palpie(Tol_bright)
palpie(cud)
palpie(Tol_muted)
deparse(substitute(Tol_bright))
palpie <- function(col)
{
par(mar=c(1,1,1,1))
ones <- rep(1, length=length(col))
names(ones) <- col
title <- deparse(substitute(col))
pie(ones, col=col, cex=.75, main = title)
par(mar=c(5.1, 4.1, 4.1, 2.1))
}
palpie(Tol_muted)
par(mfrow=c(2,2))
palpie(Tol_muted)
palpie(Tol_bright)
palpie(Tol_light)
palpie(cud)
show_col(Tol_muted)
show_col(Tol_light)
show_col(Tol_bright)
show_col(Tol_muted)
show_col(cud)
par(mfrow=c(2,2))
show_col(Tol_light)
show_col(Tol_bright)
show_col(Tol_muted)
show_col(cud)
pal(Tol_bright)
par(mfrow=c(2,2))
palpie(Tol_bright)
palpie(Tol_muted)
palpie(Tol_light)
palpie(Cud)
par(mfrow=c(2,2))
pal(Tol_bright)
pal(Tol_muted)
pal(Tol_light)
pal(Cud)
Cud <- c("#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7", "#000000")
par(mfrow=c(2,2))
pal(Tol_bright)
pal(Tol_muted)
pal(Tol_light)
pal(Cud)
par(mfrow=c(2,2))
palpie(Tol_bright)
palpie(Tol_muted)
palpie(Tol_light)
palpie(Cud)
pal <- function(col, border = "light gray", ...){
n <- length(col)
plot(0, 0, type="n", xlim = c(0, 1), ylim = c(0, 1),
axes = FALSE, xlab = col, ylab = "", ...)
rect(0:(n-1)/n, 0, 1:n/n, 1, col = col, border = border)
}
pal(Cud)
pal <- function(col, border = "light gray", ...){
n <- length(col)
plot(0, 0, type="n", xlim = c(0, 1), ylim = c(0, 1),
axes = FALSE, xlab = "", ylab = "", ...)
rect(0:(n-1)/n, 0, 1:n/n, 1, col = col, border = border)
}
# Function for plotting colors as pie
palpie <- function(col)
{
par(mar=c(1,1,1,1))
ones <- rep(1, length=length(col))
names(ones) <- col
title <- deparse(substitute(col))
pie(ones, col=col, cex=.75, main = title)
par(mar=c(5.1, 4.1, 4.1, 2.1))
}
par(mfrow=c(2,2))
palpie(Tol_bright)
palpie(Tol_muted)
palpie(Tol_light)
palpie(Cud)
palpie <- function(col)
{
par(mar=c(1,1,1,1))
ones <- rep(1, length=length(col))
names(ones) <- col
title <- deparse(substitute(col))
pie(ones, col=col, cex=1, main = title)
par(mar=c(5.1, 4.1, 4.1, 2.1))
}
par(mfrow=c(2,2))
palpie(Tol_bright)
palpie(Tol_muted)
palpie(Tol_light)
palpie(Cud)
shiny::runApp('surfdrive/Shiny-project/PlotTwist')
palpie(Tol_bright)
palpie(Tol_muted)
palpie(Tol_light)
palpie(Cud)
par(mfrow=c(4,1))
palpie(Tol_bright)
palpie(Tol_muted)
palpie(Tol_light)
palpie(Cud)
par(mfrow=c(1,4))
palpie(Tol_bright)
palpie(Tol_muted)
palpie(Tol_light)
palpie(Cud)
cb_palette <- c("#999999", "#E69F00", "#56B4E9", "#009E73","#F0E442", "#0072B2", "#D55E00", "#CC79A7")
palpie <- function(col)
{
par(mar=c(1,1,1,1))
ones <- rep(1, length=length(col))
names(ones) <- col
title <- deparse(substitute(col))
pie(ones, col=col, cex=1, main = title)
par(mar=c(5.1, 4.1, 4.1, 2.1))
}
paslpie(cb_palette)
palpie(cb_palette)
shiny::runApp('surfdrive/Shiny-project/PlotsOfData')
shiny::runApp('surfdrive/Shiny-project/PlotTwist')
shiny::runApp()
?geom_label
runApp()
runApp()
runApp()
